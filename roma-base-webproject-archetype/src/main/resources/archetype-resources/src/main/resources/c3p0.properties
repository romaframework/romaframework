#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}
${symbol_pound}         C3P0 CONNECTION POOL SETTINGS
${symbol_pound} http://www.mchange.com/projects/c3p0/index.html
${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}

c3p0.initialPoolSize=3
${symbol_pound}Default: 3
${symbol_pound}Number of Connections a pool will try to acquire upon startup. 
${symbol_pound}Should be between minPoolSize and maxPoolSize. [See "Basic Pool 
${symbol_pound}Configuration"]

c3p0.maxPoolSize=15
${symbol_pound}Default: 15
${symbol_pound}Maximum number of Connections a pool will maintain at any given 
${symbol_pound}time. [See "Basic Pool Configuration"]

c3p0.minPoolSize=1
${symbol_pound}Default: 3
${symbol_pound}Minimum number of Connections a pool will maintain at any 
${symbol_pound}given time. [See "Basic Pool Configuration"]

c3p0.acquireIncrement=1
${symbol_pound}Default: 3
${symbol_pound}Determines how many connections at a time c3p0 will try to acquire 
${symbol_pound}when the pool is exhausted. [See "Basic Pool Configuration"]

c3p0.maxIdleTime=600
${symbol_pound}Default: 0
${symbol_pound}Seconds a Connection can remain pooled but unused before being 
${symbol_pound}discarded. Zero means idle connections never expire. [See "Basic 
${symbol_pound}Pool Configuration"]

c3p0.idleConnectionTestPeriod=600
${symbol_pound}Default: 0
${symbol_pound}If this is a number greater than 0, c3p0 will test all idle, pooled 
${symbol_pound}but unchecked-out connections, every this number of seconds. 
${symbol_pound}[See "Configuring Connection Testing"]

${symbol_pound}c3p0.acquireRetryAttempts=3
${symbol_pound}Default: 30
${symbol_pound}Defines how many times c3p0 will try to acquire a new Connection 
${symbol_pound}from the database before giving up. If this value is less than or 
${symbol_pound}equal to zero, c3p0 will keep trying to fetch a Connection 
${symbol_pound}indefinitely.   [See "Configuring Recovery From Database Outages"]

${symbol_pound}c3p0.acquireRetryDelay
${symbol_pound}Default: 1000
${symbol_pound}Milliseconds, time c3p0 will wait between acquire attempts. 
${symbol_pound}[See "Configuring Recovery From Database Outages"]

${symbol_pound}c3p0.autoCommitOnClose
${symbol_pound}Default: false
${symbol_pound}The JDBC spec is unforgivably silent on what should happen to 
${symbol_pound}unresolved, pending transactions on Connection close. C3P0's 
${symbol_pound}default policy is to rollback any uncommitted, pending work. 
${symbol_pound}(I think this is absolutely, undeniably the right policy, but 
${symbol_pound}there is no consensus among JDBC driver vendors.) Setting 
${symbol_pound}autoCommitOnClose to true causes uncommitted pending work to be 
${symbol_pound}committed, rather than rolled back on Connection close. [Note: 
${symbol_pound}Since the spec is absurdly unclear on this question, application 
${symbol_pound}authors who wish to avoid bugs and inconsistent behavior should 
${symbol_pound}ensure that all transactions are explicitly either committed or 
${symbol_pound}rolled-back before close is called.] [See "Configuring Unresolved 
${symbol_pound}Transaction Handling"]

${symbol_pound}c3p0.automaticTestTable
${symbol_pound}Default: null
${symbol_pound}If provided, c3p0 will create an empty table of the specified name, 
${symbol_pound}and use queries against that table to test the Connection. If 
${symbol_pound}automaticTestTable is provided, c3p0 will generate its own test 
${symbol_pound}query, therefore any preferredTestQuery set will be ignored. You 
${symbol_pound}should not work with the named table after c3p0 creates it; it 
${symbol_pound}should be strictly for c3p0's use in testing your Connection. (If 
${symbol_pound}you define your own ConnectionTester, it must implement the 
${symbol_pound}QueryConnectionTester interface for this parameter to be useful.) 
${symbol_pound}[See "Configuring Connection Testing"]

${symbol_pound}c3p0.breakAfterAcquireFailure
${symbol_pound}Default: false
${symbol_pound}If true, a pooled DataSource will declare itself broken and be 
${symbol_pound}permanently closed if a Connection cannot be obtained from the 
${symbol_pound}database after making acquireRetryAttempts to acquire one. If 
${symbol_pound}false, failure to obtain a Connection will cause all Threads 
${symbol_pound}waiting for the pool to acquire a Connection to throw an Exception, 
${symbol_pound}but the DataSource will remain valid, and will attempt to acquire 
${symbol_pound}again following a call to getConnection(). [See "Configuring 
${symbol_pound}Recovery From Database Outages"]

${symbol_pound}c3p0.checkoutTimeout
${symbol_pound}Default: 0
${symbol_pound}The number of milliseconds a client calling getConnection() will 
${symbol_pound}wait for a Connection to be checked-in or acquired when the pool 
${symbol_pound}is exhausted. Zero means wait indefinitely. Setting any positive 
${symbol_pound}value will cause the getConnection() call to time-out and break 
${symbol_pound}with an SQLException after the specified number of milliseconds.

${symbol_pound}c3p0.connectionTesterClassName
${symbol_pound}Default: com.mchange.v2.c3p0.impl.DefaultConnectionTester
${symbol_pound}The fully qualified class-name of an implememtation of the 
${symbol_pound}ConnectionTester interface, or QueryConnectionTester if you would 
${symbol_pound}like instances to have access to a user-configured preferredTestQuery. 
${symbol_pound}This can be used to customize how c3p0 DataSources test Connections, 
${symbol_pound}but with the introduction of automaticTestTable and preferredTestQuery 
${symbol_pound}configuration parameters, "rolling your own" should be overkill for 
${symbol_pound}most users. [See "Configuring Connection Testing"

${symbol_pound}c3p0.factoryClassLocation
${symbol_pound}Default: null
${symbol_pound}DataSources that will be bound by JNDI and use that API's 
${symbol_pound}Referenceable interface to store themselves may specify a URL 
${symbol_pound}from which the class capable of dereferencing a them may be 
${symbol_pound}loaded. If (as is usually the case) the c3p0 libraries will 
${symbol_pound}be locally available to the JNDI service, leave this set as null.

${symbol_pound}c3p0.forceIgnoreUnresolvedTransactions
${symbol_pound}Default: false
${symbol_pound}Strongly disrecommended. Setting this to true may lead to subtle 
${symbol_pound}and bizarre bugs. This is a terrible setting, leave it alone 
${symbol_pound}unless absolutely necessary. It is here to workaround broken 
${symbol_pound}databases / JDBC drivers that do not properly support transactions, 
${symbol_pound}but that allow Connections' autoCommit flags to go to false 
${symbol_pound}regardless. If you are using a database that supports transactions 
${symbol_pound}"partially" (this is oxymoronic, as the whole point of transactions 
${symbol_pound}is to perform operations reliably and completely, but nonetheless 
${symbol_pound}such databases are out there), if you feel comfortable ignoring the 
${symbol_pound}fact that Connections with autoCommit == false may be in the middle 
${symbol_pound}of transactions and may hold locks and other resources, you may 
${symbol_pound}turn off c3p0's wise default behavior, which is to protect itself, 
${symbol_pound}as well as the usability and consistency of the database, by either 
${symbol_pound}rolling back (default) or committing (see c3p0.autoCommitOnClose above) 
${symbol_pound}unresolved transactions. This should only be set to true when you 
${symbol_pound}are sure you are using a database that allows Connections' 
${symbol_pound}autoCommit flag to go to false, but offers no other meaningful 
${symbol_pound}support of transactions. Otherwise setting this to true is just 
${symbol_pound}a bad idea.     [See "Configuring Unresolved Transaction Handling"]

${symbol_pound}c3p0.maxStatements
${symbol_pound}Default: 0
${symbol_pound}The size of c3p0's global PreparedStatement cache. If both 
${symbol_pound}maxStatements and maxStatementsPerConnection are zero, statement 
${symbol_pound}caching will not be enabled. If maxStatements is zero but 
${symbol_pound}maxStatementsPerConnection is a non-zero value, statement 
${symbol_pound}caching will be enabled, but no global limit will be enforced, 
${symbol_pound}only the per-connection maximum. maxStatements controls the total 
${symbol_pound}number of Statements cached, for all Connections. If set, it 
${symbol_pound}should be a fairly large number, as each pooled Connection 
${symbol_pound}requires its own, distinct flock of cached statements. As a 
${symbol_pound}guide, consider how many distinct PreparedStatements are used 
${symbol_pound}frequently in your application, and multiply that number by 
${symbol_pound}maxPoolSize to arrive at an appropriate value. Though maxStatements 
${symbol_pound}is the JDBC standard parameter for controlling statement caching, 
${symbol_pound}users may find c3p0's alternative maxStatementsPerConnection 
${symbol_pound}more intuitive to use. [See "Configuring Statement Pooling"]

${symbol_pound}c3p0.maxStatementsPerConnection
${symbol_pound}Default: 0
${symbol_pound}The number of PreparedStatements c3p0 will cache for a single 
${symbol_pound}pooled Connection. If both maxStatements and 
${symbol_pound}maxStatementsPerConnection are zero, statement caching will 
${symbol_pound}not be enabled. If maxStatementsPerConnection is zero but 
${symbol_pound}maxStatements is a non-zero value, statement caching will be 
${symbol_pound}enabled, and a global limit enforced, but otherwise no limit 
${symbol_pound}will be set on the number of cached statements for a single 
${symbol_pound}Connection. If set, maxStatementsPerConnection should be set 
${symbol_pound}to about the number distinct PreparedStatements that are used 
${symbol_pound}frequently in your application, plus two or three extra so 
${symbol_pound}infrequently statements don't force the more common cached 
${symbol_pound}statements to be culled. Though maxStatements is the JDBC 
${symbol_pound}standard parameter for controlling statement caching, users 
${symbol_pound}may find maxStatementsPerConnection more intuitive to use. 
${symbol_pound}[See "Configuring Statement Pooling"]

${symbol_pound}c3p0.numHelperThreads
${symbol_pound}Default: 3
${symbol_pound}c3p0 is very asynchronous. Slow JDBC operations are generally 
${symbol_pound}performed by helper threads that don't hold contended locks. 
${symbol_pound}Spreading these operations over multiple threads can 
${symbol_pound}significantly improve performance by allowing multiple 
${symbol_pound}operations to be performed simultaneously.

${symbol_pound}c3p0.preferredTestQuery
${symbol_pound}Default: null
${symbol_pound}Defines the query that will be executed for all connection 
${symbol_pound}tests, if the default ConnectionTester (or some other 
${symbol_pound}implementation of QueryConnectionTester) is being used. 
${symbol_pound}Defining a preferredTestQuery that will execute quickly 
${symbol_pound}in your database may dramatically speed up Connection tests. 
${symbol_pound}(If no preferredTestQuery is set, the default ConnectionTester 
${symbol_pound}executes a getTables() call on the Connection's 
${symbol_pound}DatabaseMetaData. Depending on your database, this may 
${symbol_pound}execute more slowly than a "normal" database query.) NOTE: 
${symbol_pound}The table against which your preferredTestQuery will be run 
${symbol_pound}must exist in the database schema prior to your initialization 
${symbol_pound}of your DataSource. If your application defines its own schema, 
${symbol_pound}try automaticTestTable instead. [See "Configuring Connection 
${symbol_pound}Testing"]

${symbol_pound}c3p0.propertyCycle
${symbol_pound}Default: 300
${symbol_pound}Maximum time in seconds before user configuration constraints 
${symbol_pound}are enforced. c3p0 enforces configuration constraints continually, 
${symbol_pound}and ignores this parameter. It is included for JDBC 3 completeness.

${symbol_pound}c3p0.testConnectionOnCheckin
${symbol_pound}Default: false
${symbol_pound}If true, an operation will be performed asynchronously at every 
${symbol_pound}connection checkin to verify that the connection is valid. Use 
${symbol_pound}in combination with idleConnectionTestPeriod for quite reliable, 
${symbol_pound}always asynchronous Connection testing. Also, setting an 
${symbol_pound}automaticTestTable or preferredTestQuery will usually speed 
${symbol_pound}up all connection tests. [See "Configuring Connection Testing"]

${symbol_pound}c3p0.testConnectionOnCheckout
${symbol_pound}Default: false
${symbol_pound}Use only if necessary. Expensive. If true, an operation will 
${symbol_pound}be performed at every connection checkout to verify that the 
${symbol_pound}connection is valid. Better choice: verify connections periodically 
${symbol_pound}using idleConnectionTestPeriod. Also, setting an automaticTestTable 
${symbol_pound}or preferredTestQuery will usually speed up all connection tests. 
${symbol_pound}[See "Configuring Connection Testing"]

${symbol_pound}c3p0.usesTraditionalReflectiveProxies
${symbol_pound}Default: false
${symbol_pound}c3p0 originally used reflective dynamic proxies for implementations 
${symbol_pound}of Connections and other JDBC interfaces. As of c3p0-0.8.5, 
${symbol_pound}non-reflective, code-generated implementations are used instead. 
${symbol_pound}As this was a major change, and the old codebase had been 
${symbol_pound}extensively used and tested, this parameter was added to allow 
${symbol_pound}users to revert of they had problems. The new, non-reflexive 
${symbol_pound}implementation is faster, and has now been widely deployed and 
${symbol_pound}tested, so it is unlikely that this parameter will be useful. 
${symbol_pound}Both the old reflective and newer non-reflective codebases are 
${symbol_pound}being maintained, but support for the older codebase may (or may not) 
${symbol_pound}be dropped in the future.
